/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

options {
    STATIC = false;
    UNICODE_INPUT = true;
    ERROR_REPORTING = true;
    MULTI = true;
    VISITOR = true;
    VISITOR_DATA_TYPE = "Object";
    VISITOR_RETURN_TYPE = "Object";
    VISITOR_EXCEPTION = "";
    NODE_DEFAULT_VOID = true;
}

///////////////////////////////////////////////////////////////////////////////

PARSER_BEGIN(Parser)

package org.apache.maven.shell.parser.impl;

import java.io.Reader;
import java.io.StringReader;

/**
 * Support for command line parsing.
 *
 * @author <a href="mailto:jason@planet57.com">Jason Dillon</a>
 */
public class Parser
{
    public Parser() {
        this(new StringReader(""));
    }

    public ASTCommandLine parse(final Reader reader) throws ParseException {
        assert reader != null;

        this.ReInit(reader);

        return this.commandLine();
    }
}

PARSER_END(Parser)

///////////////////////////////////////////////////////////////////////////////

//
// WHITE SPACE
//

<DEFAULT> TOKEN :
{
    < WHITESPACE: ( " " | "\t" | "\n" | "\r" | "\f" ) >
}

//
// COMMENTS
//

<DEFAULT> SPECIAL_TOKEN :
{
    < COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
}

//
// STRINGS
//

<DEFAULT> TOKEN :
{
    < STRING:
      (   (~["\"","\\"," ","\t","\n","\r","\f",";","|","\"","'"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\"",";"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )+
    >
|
    < OPAQUE_STRING:
      "'"
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
    >
|
    < QUOTED_STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
    >
}

//
// SEPARATORS
//

<DEFAULT> TOKEN :
{
    < SEMICOLON: ";" >
}

<DEFAULT> TOKEN :
{
    < PIPE: "|" >
}


///////////////////////////////////////////////////////////////////////////////

ASTCommandLine commandLine() #CommandLine: {}
{
    (
        expression() ( ";" [ expression() ] )* | <EOF>
    )
    {
        return jjtThis;
    }
}

void whitespace() #Whitespace: {}
{
    <WHITESPACE>
}

void expression() #Expression: {}
{
    ( argument() | whitespace() )+
}

void argument() #void: {}
{
    string()
}

void string() #void: {}
{
    quotedString() | opaqueString() | plainString()
}

void quotedString() #QuotedString:
{
    Token t;
}
{
    t=<QUOTED_STRING>
    {
        jjtThis.setToken(t);
    }
}

void opaqueString() #OpaqueString:
{
    Token t;
}
{
    t=<OPAQUE_STRING>
    {
        jjtThis.setToken(t);
    }
}

void plainString() #PlainString:
{
    Token t;
}
{
    t=<STRING>
    {
        jjtThis.setToken(t);
    }
}

